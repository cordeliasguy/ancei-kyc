/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CompanyLoginRouteImport } from './routes/company/login'
import { Route as ClientNaturalRouteImport } from './routes/client/natural'
import { Route as ClientLegalRouteImport } from './routes/client/legal'
import { Route as AuthenticatedCompanyDashboardRouteImport } from './routes/_authenticated/company/dashboard'
import { Route as AuthenticatedCompanyClientsRouteImport } from './routes/_authenticated/company/clients'
import { Route as AuthenticatedCompanyViewKycIdRouteImport } from './routes/_authenticated/company/view/$kycId'
import { Route as AuthenticatedCompanyReviewKycIdRouteImport } from './routes/_authenticated/company/review/$kycId'
import { Route as AuthenticatedCompanyOcicKycIdRouteImport } from './routes/_authenticated/company/ocic/$kycId'
import { Route as AuthenticatedCompanyComplianceKycIdRouteImport } from './routes/_authenticated/company/compliance/$kycId'

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CompanyLoginRoute = CompanyLoginRouteImport.update({
  id: '/company/login',
  path: '/company/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientNaturalRoute = ClientNaturalRouteImport.update({
  id: '/client/natural',
  path: '/client/natural',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientLegalRoute = ClientLegalRouteImport.update({
  id: '/client/legal',
  path: '/client/legal',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedCompanyDashboardRoute =
  AuthenticatedCompanyDashboardRouteImport.update({
    id: '/company/dashboard',
    path: '/company/dashboard',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedCompanyClientsRoute =
  AuthenticatedCompanyClientsRouteImport.update({
    id: '/company/clients',
    path: '/company/clients',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedCompanyViewKycIdRoute =
  AuthenticatedCompanyViewKycIdRouteImport.update({
    id: '/company/view/$kycId',
    path: '/company/view/$kycId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedCompanyReviewKycIdRoute =
  AuthenticatedCompanyReviewKycIdRouteImport.update({
    id: '/company/review/$kycId',
    path: '/company/review/$kycId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedCompanyOcicKycIdRoute =
  AuthenticatedCompanyOcicKycIdRouteImport.update({
    id: '/company/ocic/$kycId',
    path: '/company/ocic/$kycId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedCompanyComplianceKycIdRoute =
  AuthenticatedCompanyComplianceKycIdRouteImport.update({
    id: '/company/compliance/$kycId',
    path: '/company/compliance/$kycId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/client/legal': typeof ClientLegalRoute
  '/client/natural': typeof ClientNaturalRoute
  '/company/login': typeof CompanyLoginRoute
  '/company/clients': typeof AuthenticatedCompanyClientsRoute
  '/company/dashboard': typeof AuthenticatedCompanyDashboardRoute
  '/company/compliance/$kycId': typeof AuthenticatedCompanyComplianceKycIdRoute
  '/company/ocic/$kycId': typeof AuthenticatedCompanyOcicKycIdRoute
  '/company/review/$kycId': typeof AuthenticatedCompanyReviewKycIdRoute
  '/company/view/$kycId': typeof AuthenticatedCompanyViewKycIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/client/legal': typeof ClientLegalRoute
  '/client/natural': typeof ClientNaturalRoute
  '/company/login': typeof CompanyLoginRoute
  '/company/clients': typeof AuthenticatedCompanyClientsRoute
  '/company/dashboard': typeof AuthenticatedCompanyDashboardRoute
  '/company/compliance/$kycId': typeof AuthenticatedCompanyComplianceKycIdRoute
  '/company/ocic/$kycId': typeof AuthenticatedCompanyOcicKycIdRoute
  '/company/review/$kycId': typeof AuthenticatedCompanyReviewKycIdRoute
  '/company/view/$kycId': typeof AuthenticatedCompanyViewKycIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/client/legal': typeof ClientLegalRoute
  '/client/natural': typeof ClientNaturalRoute
  '/company/login': typeof CompanyLoginRoute
  '/_authenticated/company/clients': typeof AuthenticatedCompanyClientsRoute
  '/_authenticated/company/dashboard': typeof AuthenticatedCompanyDashboardRoute
  '/_authenticated/company/compliance/$kycId': typeof AuthenticatedCompanyComplianceKycIdRoute
  '/_authenticated/company/ocic/$kycId': typeof AuthenticatedCompanyOcicKycIdRoute
  '/_authenticated/company/review/$kycId': typeof AuthenticatedCompanyReviewKycIdRoute
  '/_authenticated/company/view/$kycId': typeof AuthenticatedCompanyViewKycIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/client/legal'
    | '/client/natural'
    | '/company/login'
    | '/company/clients'
    | '/company/dashboard'
    | '/company/compliance/$kycId'
    | '/company/ocic/$kycId'
    | '/company/review/$kycId'
    | '/company/view/$kycId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/client/legal'
    | '/client/natural'
    | '/company/login'
    | '/company/clients'
    | '/company/dashboard'
    | '/company/compliance/$kycId'
    | '/company/ocic/$kycId'
    | '/company/review/$kycId'
    | '/company/view/$kycId'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/client/legal'
    | '/client/natural'
    | '/company/login'
    | '/_authenticated/company/clients'
    | '/_authenticated/company/dashboard'
    | '/_authenticated/company/compliance/$kycId'
    | '/_authenticated/company/ocic/$kycId'
    | '/_authenticated/company/review/$kycId'
    | '/_authenticated/company/view/$kycId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  ClientLegalRoute: typeof ClientLegalRoute
  ClientNaturalRoute: typeof ClientNaturalRoute
  CompanyLoginRoute: typeof CompanyLoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/company/login': {
      id: '/company/login'
      path: '/company/login'
      fullPath: '/company/login'
      preLoaderRoute: typeof CompanyLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/client/natural': {
      id: '/client/natural'
      path: '/client/natural'
      fullPath: '/client/natural'
      preLoaderRoute: typeof ClientNaturalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/client/legal': {
      id: '/client/legal'
      path: '/client/legal'
      fullPath: '/client/legal'
      preLoaderRoute: typeof ClientLegalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/company/dashboard': {
      id: '/_authenticated/company/dashboard'
      path: '/company/dashboard'
      fullPath: '/company/dashboard'
      preLoaderRoute: typeof AuthenticatedCompanyDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/company/clients': {
      id: '/_authenticated/company/clients'
      path: '/company/clients'
      fullPath: '/company/clients'
      preLoaderRoute: typeof AuthenticatedCompanyClientsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/company/view/$kycId': {
      id: '/_authenticated/company/view/$kycId'
      path: '/company/view/$kycId'
      fullPath: '/company/view/$kycId'
      preLoaderRoute: typeof AuthenticatedCompanyViewKycIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/company/review/$kycId': {
      id: '/_authenticated/company/review/$kycId'
      path: '/company/review/$kycId'
      fullPath: '/company/review/$kycId'
      preLoaderRoute: typeof AuthenticatedCompanyReviewKycIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/company/ocic/$kycId': {
      id: '/_authenticated/company/ocic/$kycId'
      path: '/company/ocic/$kycId'
      fullPath: '/company/ocic/$kycId'
      preLoaderRoute: typeof AuthenticatedCompanyOcicKycIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/company/compliance/$kycId': {
      id: '/_authenticated/company/compliance/$kycId'
      path: '/company/compliance/$kycId'
      fullPath: '/company/compliance/$kycId'
      preLoaderRoute: typeof AuthenticatedCompanyComplianceKycIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedCompanyClientsRoute: typeof AuthenticatedCompanyClientsRoute
  AuthenticatedCompanyDashboardRoute: typeof AuthenticatedCompanyDashboardRoute
  AuthenticatedCompanyComplianceKycIdRoute: typeof AuthenticatedCompanyComplianceKycIdRoute
  AuthenticatedCompanyOcicKycIdRoute: typeof AuthenticatedCompanyOcicKycIdRoute
  AuthenticatedCompanyReviewKycIdRoute: typeof AuthenticatedCompanyReviewKycIdRoute
  AuthenticatedCompanyViewKycIdRoute: typeof AuthenticatedCompanyViewKycIdRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedCompanyClientsRoute: AuthenticatedCompanyClientsRoute,
  AuthenticatedCompanyDashboardRoute: AuthenticatedCompanyDashboardRoute,
  AuthenticatedCompanyComplianceKycIdRoute:
    AuthenticatedCompanyComplianceKycIdRoute,
  AuthenticatedCompanyOcicKycIdRoute: AuthenticatedCompanyOcicKycIdRoute,
  AuthenticatedCompanyReviewKycIdRoute: AuthenticatedCompanyReviewKycIdRoute,
  AuthenticatedCompanyViewKycIdRoute: AuthenticatedCompanyViewKycIdRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  ClientLegalRoute: ClientLegalRoute,
  ClientNaturalRoute: ClientNaturalRoute,
  CompanyLoginRoute: CompanyLoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
